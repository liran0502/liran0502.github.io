<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/23/C++%20string%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <url>/2025/02/23/C++%20string%E6%93%8D%E4%BD%9C%E4%B8%8E%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="1-string-概念"><a href="#1-string-概念" class="headerlink" title="1. string 概念"></a>1. string 概念</h2><p><code>string</code> 字符串其实是一种更加高级的封装，<code>string</code> 字符串中包含大量的方法，这些方法使得字符串的操作变得更加简单。<code>string</code> 使用得好，慢慢就不想使用字符数组来存放字符串了。</p><p>C++中将字符串直接作为一种类型，也就是 <code>string</code> 类型，使用 <code>string</code> 类型创建的对象就是 C++ 的字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1;<br>string s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用 C++ 中提供的 <code>string</code> 时，必须添加头文件 <code>&lt;string&gt;</code>。</p><h2 id="2-string-常见操作"><a href="#2-string-常见操作" class="headerlink" title="2. string 常见操作"></a>2. string 常见操作</h2><h3 id="2-1-创建字符串"><a href="#2-1-创建字符串" class="headerlink" title="2.1 创建字符串"></a>2.1 创建字符串</h3><ul><li><code>string s1</code>：创建空字符串 </li><li><code>string s2 = &quot;hello world&quot;</code>：创建字符串（常用）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">//添加string头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s1;<br>    string s2 = <span class="hljs-string">&quot;hello world&quot;</span>;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;s1:&quot;</span> &lt;&lt; s1 &lt;&lt; endl; <span class="hljs-comment">//s1:</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;s2:&quot;</span> &lt;&lt; s2 &lt;&lt; endl; <span class="hljs-comment">//s2: hello world</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-string字符串的输入"><a href="#2-2-string字符串的输入" class="headerlink" title="2.2 string字符串的输入"></a>2.2 string字符串的输入</h3><h4 id="2-2-1-cin的方式"><a href="#2-2-1-cin的方式" class="headerlink" title="2.2.1 cin的方式"></a>2.2.1 cin的方式</h4><p>可以直接使用 <code>cin</code> 给 <code>string</code> 类型的字符串中输入一个字符串的数据。</p><p><strong>输入不带空格的字符串</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输入带空格的字符串</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-getline-的方式"><a href="#2-2-2-getline-的方式" class="headerlink" title="2.2.2 getline 的方式"></a>2.2.2 getline 的方式</h4><p><code>getline</code> 是C++标准库中的一个函数，用于从输入流中读取一行文本，并将其存储为字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">istream&amp; <span class="hljs-title">getline</span> <span class="hljs-params">(istream&amp; is, string&amp; str)</span></span>;<br><span class="hljs-function">istream&amp; <span class="hljs-title">getline</span> <span class="hljs-params">(istream&amp; is, string&amp; str, <span class="hljs-type">char</span> delim)</span></span>;<br></code></pre></td></tr></table></figure><p>第一个函数从输入流<code>is</code>中读取内容到字符串<code>str</code>，遇到换行符停止；第二个函数从输入流<code>is</code>中读取内容到字符串<code>str</code>，遇到指定字符<code>delim</code>停止。</p><h3 id="2-3-size"><a href="#2-3-size" class="headerlink" title="2.3 size()"></a>2.3 size()</h3><p><code>string</code> 中提供了 <code>size()</code> 函数用于获取字符串长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl; <span class="hljs-comment">// 11</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-迭代器-iterator"><a href="#2-4-迭代器-iterator" class="headerlink" title="2.4 迭代器(iterator)"></a>2.4 迭代器(iterator)</h3><p>迭代器是一种对象，它可以用来遍历容器（比如我们现在学习的<code>string</code>）中的元素，迭代器的作用类似于指针，或者数组下标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-keyword">for</span> (string::iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); ++it)<br>    &#123;<br>        cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-push-back"><a href="#2-5-push-back" class="headerlink" title="2.5 push_back()"></a>2.5 push_back()</h3><p><code>push_back()</code> 用于在字符串尾部插入一个字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;h&#x27;</span>);<br>    s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;e&#x27;</span>);<br>    s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;l&#x27;</span>);<br>    s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;l&#x27;</span>);<br>    s.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;o&#x27;</span>);<br>    cout &lt;&lt; s &lt;&lt; endl; <span class="hljs-comment">// hello</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-字符串的-和-运算"><a href="#2-6-字符串的-和-运算" class="headerlink" title="2.6 字符串的+&#x3D;和+运算"></a>2.6 字符串的+&#x3D;和+运算</h3><p><code>string</code> 类型的字符串支持 <code>+</code> 和 <code>+=</code> 运算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;hello&quot;</span>;<br>    s += <span class="hljs-string">&quot; world&quot;</span>;<br>    cout &lt;&lt; s &lt;&lt; endl; <span class="hljs-comment">// hello world</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-pop-back"><a href="#2-7-pop-back" class="headerlink" title="2.7 pop_back()"></a>2.7 pop_back()</h3><p><code>pop_back()</code> 用于删除字符串中尾部的一个字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;hello&quot;</span>;<br>    s.<span class="hljs-built_in">pop_back</span>();<br>    cout &lt;&lt; s &lt;&lt; endl; <span class="hljs-comment">// hell</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-8-insert"><a href="#2-8-insert" class="headerlink" title="2.8 insert"></a>2.8 insert</h3><p><code>insert()</code> 函数用于在字符串的指定位置插入字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;abcdefghi&quot;</span>;<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;xxx&quot;</span>);<br>    cout &lt;&lt; s &lt;&lt; endl; <span class="hljs-comment">// abcxxxdefghi</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-find"><a href="#2-9-find" class="headerlink" title="2.9 find()"></a>2.9 find()</h3><p><code>find()</code> 函数用于查找字符串中指定子串&#x2F;字符，并返回子串&#x2F;字符在字符串中第一次出现的位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-type">size_t</span> pos = s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pos != string::npos)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Found at position: &quot;</span> &lt;&lt; pos &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Not found&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-10-substr"><a href="#2-10-substr" class="headerlink" title="2.10 substr()"></a>2.10 substr()</h3><p><code>substr()</code> 函数用于截取字符串中指定位置指定长度的子串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    string sub = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>);<br>    cout &lt;&lt; sub &lt;&lt; endl; <span class="hljs-comment">// world</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-11-string的关系运算"><a href="#2-11-string的关系运算" class="headerlink" title="2.11 string的关系运算"></a>2.11 string的关系运算</h3><p><code>string</code> 类型的字符串支持关系运算，如 <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br>    string s2 = <span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-keyword">if</span> (s1 &lt; s2)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;s1 is less than s2&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-12-和string相关的函数"><a href="#2-12-和string相关的函数" class="headerlink" title="2.12 和string相关的函数"></a>2.12 和string相关的函数</h3><h4 id="2-12-1-stoi-stol"><a href="#2-12-1-stoi-stol" class="headerlink" title="2.12.1 stoi&#x2F;stol"></a>2.12.1 stoi&#x2F;stol</h4><p><code>stoi</code> 是将字符串转换成 <code>int</code> 类型的值。需要注意，如果字符串无法转换为有效的整数，<code>stoi</code> 会抛出 <code>invalid_argument</code> 或 <code>out_of_range</code> 异常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;123&quot;</span>;<br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">stoi</span>(s);<br>    cout &lt;&lt; num &lt;&lt; endl; <span class="hljs-comment">// 123</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-12-2-stod-stof"><a href="#2-12-2-stod-stof" class="headerlink" title="2.12.2 stod&#x2F;stof"></a>2.12.2 stod&#x2F;stof</h4><p><code>stod</code> 是将字符串转换成 <code>double</code> 类型的值。类似 <code>stoi</code>，转换失败时也会抛出异常。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;3.14&quot;</span>;<br>    <span class="hljs-type">double</span> num = <span class="hljs-built_in">stod</span>(s);<br>    cout &lt;&lt; num &lt;&lt; endl; <span class="hljs-comment">// 3.14</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-12-3-to-string"><a href="#2-12-3-to-string" class="headerlink" title="2.12.3 to_string"></a>2.12.3 to_string</h4><p><code>to_string</code> 函数可以将数字转换成字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">123</span>;<br>    string s = <span class="hljs-built_in">to_string</span>(num);<br>    cout &lt;&lt; s &lt;&lt; endl; <span class="hljs-comment">// 123</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h2><h3 id="练习1：标题统计"><a href="#练习1：标题统计" class="headerlink" title="练习1：标题统计"></a>练习1：标题统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历字符串，统计非空格字符的数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> e : s) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isspace</span>(e)) <br>        &#123;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习2：石头剪子布"><a href="#练习2：石头剪子布" class="headerlink" title="练习2：石头剪子布"></a>练习2：石头剪子布</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    string s1, s2;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        cin &gt;&gt; s1 &gt;&gt; s2;<br>        <span class="hljs-keyword">if</span> (s1 == s2)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Tie&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-comment">// 判断玩家1获胜的情况</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((s1 == <span class="hljs-string">&quot;Rock&quot;</span> &amp;&amp; s2 == <span class="hljs-string">&quot;Scissors&quot;</span>) || <br>                 (s1 == <span class="hljs-string">&quot;Scissors&quot;</span> &amp;&amp; s2 == <span class="hljs-string">&quot;Paper&quot;</span>) || <br>                 (s1 == <span class="hljs-string">&quot;Paper&quot;</span> &amp;&amp; s2 == <span class="hljs-string">&quot;Rock&quot;</span>)) <br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Player1&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Player2&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习3：密码翻译"><a href="#练习3：密码翻译" class="headerlink" title="练习3：密码翻译"></a>练习3：密码翻译</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-comment">// 处理小写字母和大写字母，除了a和A</span><br>        <span class="hljs-keyword">if</span> ((s[i] &gt;= <span class="hljs-string">&#x27;b&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (s[i] &gt;= <span class="hljs-string">&#x27;B&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)) <br>        &#123;<br>            s[i] -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理a的情况</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;a&#x27;</span>) <br>        &#123;<br>            s[i] = <span class="hljs-string">&#x27;z&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理A的情况</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;A&#x27;</span>) <br>        &#123;<br>            s[i] = <span class="hljs-string">&#x27;Z&#x27;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习4：文字处理软件"><a href="#练习4：文字处理软件" class="headerlink" title="练习4：文字处理软件"></a>练习4：文字处理软件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> q = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; q;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> a, b;<br>    string str;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; m;<br>        <span class="hljs-keyword">switch</span> (m)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                cin &gt;&gt; str;<br>                s += str;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                cin &gt;&gt; a &gt;&gt; b;<br>                s = s.<span class="hljs-built_in">substr</span>(a, b);<br>                cout &lt;&lt; s &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                cin &gt;&gt; a &gt;&gt; str;<br>                s.<span class="hljs-built_in">insert</span>(a, str);<br>                cout &lt;&lt; s &lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                cin &gt;&gt; str;<br>                <span class="hljs-type">size_t</span> pos = s.<span class="hljs-built_in">find</span>(str);<br>                <span class="hljs-keyword">if</span> (pos == string::npos)<br>                &#123;<br>                    cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    cout &lt;&lt; pos &lt;&lt; endl;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习5：单词的长度"><a href="#练习5：单词的长度" class="headerlink" title="练习5：单词的长度"></a>练习5：单词的长度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    cout &lt;&lt; s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; s)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习6：单词翻转"><a href="#练习6：单词翻转" class="headerlink" title="练习6：单词翻转"></a>练习6：单词翻转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; str)<br>    &#123;<br>        <span class="hljs-built_in">reverse</span>(str.<span class="hljs-built_in">begin</span>(), str.<span class="hljs-built_in">end</span>());<br>        cout &lt;&lt; str &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习7：判断字符串是否为回文"><a href="#练习7：判断字符串是否为回文" class="headerlink" title="练习7：判断字符串是否为回文"></a>练习7：判断字符串是否为回文</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 从字符串两端向中间比较字符，判断是否为回文</span><br>    <span class="hljs-keyword">while</span> (left &lt; right) <br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[left] != s[right])<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        left++;<br>        right--;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习8：手机"><a href="#练习8：手机" class="headerlink" title="练习8：手机"></a>练习8：手机</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> count[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    string s;<br>    <span class="hljs-built_in">getline</span>(cin, s);<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : s)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            sum += count[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习9：口算练习题"><a href="#练习9：口算练习题" class="headerlink" title="练习9：口算练习题"></a>练习9：口算练习题</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    string op, num1, num2, last;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        string ans;<br>        cin &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;a&quot;</span> || op == <span class="hljs-string">&quot;b&quot;</span> || op == <span class="hljs-string">&quot;c&quot;</span>)<br>        &#123;<br>            cin &gt;&gt; num1 &gt;&gt; num2;<br>            <span class="hljs-type">int</span> n1 = <span class="hljs-built_in">stoi</span>(num1);<br>            <span class="hljs-type">int</span> n2 = <span class="hljs-built_in">stoi</span>(num2);<br>            ans += num1;<br>            <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;a&quot;</span>)<br>            &#123;<br>                ret = n1 + n2;<br>                ans += <span class="hljs-string">&quot;+&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;b&quot;</span>)<br>            &#123;<br>                ret = n1 - n2;<br>                ans += <span class="hljs-string">&quot;-&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ret = n1 * n2;<br>                ans += <span class="hljs-string">&quot;*&quot;</span>;<br>            &#125;<br>            last = op;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            num1 = op;<br>            cin &gt;&gt; num2;<br>            <span class="hljs-type">int</span> n1 = <span class="hljs-built_in">stoi</span>(num1);<br>            <span class="hljs-type">int</span> n2 = <span class="hljs-built_in">stoi</span>(num2);<br>            ans += num1;<br>            <span class="hljs-keyword">if</span> (last == <span class="hljs-string">&quot;a&quot;</span>)<br>            &#123;<br>                ret = n1 + n2;<br>                ans += <span class="hljs-string">&quot;+&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (last == <span class="hljs-string">&quot;b&quot;</span>)<br>            &#123;<br>                ret = n1 - n2;<br>                ans += <span class="hljs-string">&quot;-&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ret = n1 * n2;<br>                ans += <span class="hljs-string">&quot;*&quot;</span>;<br>            &#125;<br>        &#125;<br>        ans += (num2 + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">to_string</span>(ret));<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>        cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/23/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%20vector%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/02/23/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%20vector%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表和vector学习笔记"><a href="#顺序表和vector学习笔记" class="headerlink" title="顺序表和vector学习笔记"></a>顺序表和vector学习笔记</h1><h2 id="一、顺序表的概念"><a href="#一、顺序表的概念" class="headerlink" title="一、顺序表的概念"></a>一、顺序表的概念</h2><h3 id="（一）线性表的定义"><a href="#（一）线性表的定义" class="headerlink" title="（一）线性表的定义"></a>（一）线性表的定义</h3><p>线性表是n个具有相同特性的数据元素的有序序列，在逻辑上可看作一条连续线段，上面分布着多个数据元素点，是一种基础且简单的数据结构。</p><h3 id="（二）线性表的顺序存储-顺序表"><a href="#（二）线性表的顺序存储-顺序表" class="headerlink" title="（二）线性表的顺序存储 - 顺序表"></a>（二）线性表的顺序存储 - 顺序表</h3><p>线性表的顺序存储结构就是顺序表，它通过数组来实现数据存储。将数据元素依次存放在内存中连续的存储单元里，就像用数组把这些元素按顺序存放起来。</p><h2 id="二、顺序表的模拟实现"><a href="#二、顺序表的模拟实现" class="headerlink" title="二、顺序表的模拟实现"></a>二、顺序表的模拟实现</h2><p>约定若无特殊说明，顺序表中默认存储int类型数据。</p><h3 id="（一）顺序表的实现方式"><a href="#（一）顺序表的实现方式" class="headerlink" title="（一）顺序表的实现方式"></a>（一）顺序表的实现方式</h3><ol><li><strong>静态分配（静态顺序表）</strong>：直接向内存申请一大块连续区域用于存放数组。优点是无需动态管理内存，代码编写简便，没有申请和释放空间的时间开销；缺点是空间一旦占满，新数据会溢出，若申请过大空间，数据量小时会造成大量空间浪费 。</li><li><strong>动态分配（动态顺序表）</strong>：按需申请空间，数据量小就申请小内存，数据量大就在原有基础上扩容。优点是空间分配灵活；缺点是代码编写复杂，动态内存管理过程中涉及频繁扩容，包括申请空间、转移数据和释放空间等操作，会消耗大量时间。</li></ol><p>在算法竞赛中，由于更关注时间开销且空间基本够用，通常采用静态实现方式。</p><h3 id="（二）创建"><a href="#（二）创建" class="headerlink" title="（二）创建"></a>（二）创建</h3><p>使用静态数组实现顺序表，定义一个足够大的静态数组和一个变量来记录当前元素个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">// 定义静态数组的最大长度</span><br><span class="hljs-type">int</span> a[N], n; <span class="hljs-comment">// 直接创建一个大数组来实现顺序表，n表示当前有多少个元素</span><br></code></pre></td></tr></table></figure><h3 id="（三）添加一个元素"><a href="#（三）添加一个元素" class="headerlink" title="（三）添加一个元素"></a>（三）添加一个元素</h3><ol><li><strong>尾插</strong>：在顺序表尾部添加元素，时间复杂度为 $O(1)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//尾插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[++n] = x; <span class="hljs-comment">// 下标为0的位置空出来</span><br>    <span class="hljs-comment">// 这样操作一般根据个人习惯，也可以从0开始计数</span><br>    <span class="hljs-comment">// 不过有些问题从1计数，处理起来可以不用考虑边界情况</span><br>    <span class="hljs-comment">// 后续学习更深的算法的时候，就会感受到</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>头插</strong>：将所有元素右移一位，再把新元素放到头部，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 头插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 要把所有的元素全部右移一位，然后再放到头部位置</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) <br>    &#123;<br>        a[i + <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    a[<span class="hljs-number">1</span>] = x; <span class="hljs-comment">// 把x放在首位</span><br>    n++; <span class="hljs-comment">// 不要忘记总个数+1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>任意位置插入</strong>：在指定位置插入元素，最坏情况下需要将数组中所有元素右移，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 任意位置插入 - 在位置p处，插入一个x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;= p; i--) <br>    &#123;<br>        a[i + <span class="hljs-number">1</span>] = a[i]; <br>    &#125;<br>    a[p] = x;<br>    n++; <span class="hljs-comment">// 不要忘记总个数+1</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="（四）删除一个元素"><a href="#（四）删除一个元素" class="headerlink" title="（四）删除一个元素"></a>（四）删除一个元素</h3><ol><li><strong>尾删</strong>：删除顺序表尾部元素，时间复杂度为 $O(1)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n--;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>头删</strong>：把所有元素向前移动一位，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 头删</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 把所有元素向前移动一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <br>    &#123;<br>        a[i - <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    n--; <span class="hljs-comment">// 总个数-1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>任意位置删除</strong>：删除指定位置元素，最坏情况下所有元素都需要左移，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 任意位置删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = p + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i - <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    n--; <span class="hljs-comment">// 总个数-1</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="（五）查找元素"><a href="#（五）查找元素" class="headerlink" title="（五）查找元素"></a>（五）查找元素</h3><ol><li><strong>按值查找</strong>：查找指定值第一次出现的位置，找不到返回0，最坏情况下需要遍历整个数组，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 查找这个数第一次出现的位置，找不到返回0</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == x) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>按位查找</strong>：返回指定位置的数，利用顺序表随机存取特性，时间复杂度为 $O(1)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 返回p位置的数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">at</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a[p];<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="（六）修改元素"><a href="#（六）修改元素" class="headerlink" title="（六）修改元素"></a>（六）修改元素</h3><p>修改指定位置的元素值，基于顺序表随机存取特性，时间复杂度为 $O(1)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 把p位置的数修改成x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[p] = x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（七）清空顺序表"><a href="#（七）清空顺序表" class="headerlink" title="（七）清空顺序表"></a>（七）清空顺序表</h3><p>简单实现方式是将元素个数置0，时间复杂度为 $O(1)$ ；严谨方式应遍历数组清空每个元素，时间复杂度为 $O(N)$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 清空顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（八）所有测试代码"><a href="#（八）所有测试代码" class="headerlink" title="（八）所有测试代码"></a>（八）所有测试代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>; <br><span class="hljs-comment">// 创建顺序表</span><br><span class="hljs-type">int</span> a1[N], n1;<br><span class="hljs-type">int</span> a2[N], n2;<br><span class="hljs-type">int</span> a3[N], n3;<br><br><span class="hljs-comment">// 打印顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 尾插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span>&amp; n, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[++n] = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">push_back</span>(a1, n1, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">push_back</span>(a3, n3, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">// 头插</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 1. 先把[1, n]的元素统一向后移动一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        a[i + <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    <span class="hljs-comment">// 2. 把x放在表头</span><br>    a[<span class="hljs-number">1</span>] = x;<br>    n++; <span class="hljs-comment">// 元素个数+1</span><br>&#125;<br><br><span class="hljs-comment">// 在任意位置插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 1. 先把[p, n]的元素统一向后移动一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i &gt;= p; i--)<br>    &#123;<br>        a[i + <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    a[p] = x;<br>    n++;<br>&#125;<br><br><span class="hljs-comment">// 尾删</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n--;<br>&#125;<br><br><span class="hljs-comment">// 头删</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 1. 先把[2, n]区间内的所有元素，统一左移一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i - <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    n--;<br>&#125;<br><br><span class="hljs-comment">// 任意位置删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 把[p + 1, n]的元素，统一左移一位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = p + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        a[i - <span class="hljs-number">1</span>] = a[i];<br>    &#125;<br>    n--;<br>&#125;<br><br><span class="hljs-comment">// 按值查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] == x) <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">at</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a[p];<br>&#125;<br><br><span class="hljs-comment">// 按位修改</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[p] = x;<br>&#125;<br><br><span class="hljs-comment">// 清空操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 测试尾插</span><br>    <span class="hljs-built_in">push_back</span>(a1, n1, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">print</span>();<br>    <span class="hljs-built_in">push_back</span>(a1, n1, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">print</span>();<br>    <span class="hljs-built_in">push_back</span>(a1, n1, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">print</span>();<br>    <span class="hljs-built_in">push_back</span>(a1, n1, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 测试头插</span><br>    <span class="hljs-built_in">push_front</span>(a1, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 测试任意位置插入</span><br>    <span class="hljs-built_in">insert</span>(a1, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-comment">// 测试尾删</span><br>    <span class="hljs-comment">// pop_back(a1, n1);</span><br>    <span class="hljs-comment">// print();</span><br>    <span class="hljs-comment">// pop_back(a1, n1);</span><br>    <span class="hljs-comment">// print();</span><br><br>    <span class="hljs-comment">// 测试头删</span><br>    <span class="hljs-comment">// pop_front(a1);</span><br>    <span class="hljs-comment">// pop_front(a1);</span><br>    <span class="hljs-comment">// print();</span><br><br>    <span class="hljs-comment">// 测试任意位置删除</span><br>    <span class="hljs-comment">// erase(a1, 3);</span><br>    <span class="hljs-comment">// print();</span><br>    <span class="hljs-comment">// erase(a1, 2);</span><br>    <span class="hljs-comment">// print();</span><br>    <span class="hljs-comment">// erase(a1, 4);</span><br>    <span class="hljs-comment">// print();</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;查找&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>        cout &lt;&lt; <span class="hljs-built_in">find</span>(a1, i) &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、封装静态顺序表"><a href="#三、封装静态顺序表" class="headerlink" title="三、封装静态顺序表"></a>三、封装静态顺序表</h2><p>当需要多个顺序表时，上述直接定义数组和变量的方式较为繁琐。可利用C++中的结构体或类进行封装，以简化操作、提高代码复用率。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 将顺序表的创建以及增删查改封装在一个类中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SqList</span><br>&#123;<br>    <span class="hljs-type">int</span> a[N];<br>    <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，初始化</span><br>    <span class="hljs-built_in">SqList</span>()<br>    &#123;<br>        n = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 尾插</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        a[++n] = x;<br>    &#125;<br><br>    <span class="hljs-comment">// 尾删</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        n--;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    SqList s1, s2; <span class="hljs-comment">// 创建了两个顺序表</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        s<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>        s<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i * <span class="hljs-number">2</span>);<br>    &#125;<br>    s<span class="hljs-number">1.</span><span class="hljs-built_in">print</span>();<br>    s<span class="hljs-number">2.</span><span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        s<span class="hljs-number">1.</span><span class="hljs-built_in">pop_back</span>();<br>        s<span class="hljs-number">2.</span><span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>    s<span class="hljs-number">1.</span><span class="hljs-built_in">print</span>();<br>    s<span class="hljs-number">2.</span><span class="hljs-built_in">print</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、动态顺序表-vector"><a href="#四、动态顺序表-vector" class="headerlink" title="四、动态顺序表 - vector"></a>四、动态顺序表 - vector</h2><p>在算法竞赛中，由于动态顺序表涉及空间申请和释放的new和delete操作效率较低，可能导致超时，且代码量较大，一般不自行实现。但在实际工作项目中，动态申请空间很有必要。C++的STL提供了已封装好的容器vector，其底层是自动扩容的顺序表，下面学习vector的使用。</p><h3 id="（一）创建vector"><a href="#（一）创建vector" class="headerlink" title="（一）创建vector"></a>（一）创建vector</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> <span class="hljs-comment">// 头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>&#125;;<br><br><span class="hljs-comment">// 1. 创建</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a1; <span class="hljs-comment">// 创建一个空的可变长数组</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a2</span><span class="hljs-params">(N)</span></span>; <span class="hljs-comment">// 指定好了一个空间，大小为N</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a3</span><span class="hljs-params">(N, <span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">// 创建一个大小为N的vector，并且里面的所有元素都是10</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; a4 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">// 使用列表初始化，创建一个vector</span><br><br>    <span class="hljs-comment">// &lt;&gt;里面可以放任意的类型，这就是模板的作用，也是模板强大的地方</span><br>    <span class="hljs-comment">// 这样，vector里面就可以放我们接触过的任意数据类型，甚至是STL</span><br>    vector&lt;string&gt; a5; <span class="hljs-comment">// 放字符串</span><br>    vector&lt;node&gt; a6; <span class="hljs-comment">// 放一个结构体</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; a7; <span class="hljs-comment">// 甚至可以放一个自己，当成一个二维数组来使用。并且每一维都是可变的</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; a8[N]; <span class="hljs-comment">// 创建N个vector</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（二）常用接口"><a href="#（二）常用接口" class="headerlink" title="（二）常用接口"></a>（二）常用接口</h3><ol><li><strong>size &#x2F; empty</strong>：<code>size</code>返回实际元素个数，<code>empty</code>判断顺序表是否为空，返回bool类型值，时间复杂度为 $O(1)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 2. size</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_size</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 创建一个一维数组</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a1</span><span class="hljs-params">(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        cout &lt;&lt; a1[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 创建一个二维数组</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">a2</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-comment">// 这里的a2[i]相当于一个vector&lt;int&gt; a(4, 5)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a2[i].<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            cout &lt;&lt; a2[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>begin &#x2F; end</strong>：<code>begin</code>返回起始位置的迭代器（左闭），<code>end</code>返回终点位置的下一个位置的迭代器（右开），可利用迭代器访问整个vector，支持范围for遍历。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 3. begin/end</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_it</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">// 迭代器的类型是vector&lt;int&gt;::iterator，但是一般使用auto简化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">begin</span>(); it != a.<span class="hljs-built_in">end</span>(); it++)<br>    &#123;<br>        cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 使用语法糖 - 范围for遍历</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : a)<br>    &#123;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>push_back &#x2F; pop_back</strong>：<code>push_back</code>在尾部添加一个元素，<code>pop_back</code>在尾部删除一个元素，时间复杂度为 $O(1)$ 。还有<code>insert</code>与<code>erase</code>，但时间复杂度过高，尽量不使用。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果不加引用，会拷贝一份，时间开销很大</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : a)<br>    &#123;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 4. 添加和删除元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_io</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-comment">// 尾插1 2 3 4 5</span><br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">print</span>(a);<br><br>    <span class="hljs-comment">// 尾删3次</span><br>    a.<span class="hljs-built_in">pop_back</span>();<br>    a.<span class="hljs-built_in">pop_back</span>();<br>    a.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-built_in">print</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>front &#x2F; back</strong>：<code>front</code>返回首元素，<code>back</code>返回尾元素，时间复杂度为 $O(1)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 5. 首元素和尾元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_fb</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        a[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; a.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>resize</strong>：修改vector的大小。大于原始大小时，多出来的位置补默认值（一般是0）；小于原始大小时，相当于删除后面的元素，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果不加引用，会拷贝一份，时间开销很大</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : a)<br>    &#123;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// 6. resize</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_resize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span></span>;<br>    a.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 扩大</span><br>    <span class="hljs-built_in">print</span>(a);<br>    a.<span class="hljs-built_in">resize</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// 缩小</span><br>    <span class="hljs-built_in">print</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>clear</strong>：清空vector，底层遍历删除每个元素，时间复杂度为 $O(N)$ 。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 如果不加引⽤，会拷⻉⼀份，时间开销很⼤ </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; a)</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x : a) <br>    &#123; <br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <br>    &#125; <br>    cout &lt;&lt; endl; <br>&#125; <br><span class="hljs-comment">// 7. clear </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_clear</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span></span>; <br>    <span class="hljs-built_in">print</span>(a);<br>    a.<span class="hljs-built_in">clear</span>(); <br>    cout &lt;&lt; a.<span class="hljs-built_in">size</span>() &lt;&lt; endl; <br>    <span class="hljs-built_in">print</span>(a); <br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/02/16/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博客的搭建流程"><a href="#博客的搭建流程" class="headerlink" title="博客的搭建流程"></a>博客的搭建流程</h1><h2 id="step1-前期准备"><a href="#step1-前期准备" class="headerlink" title="step1:前期准备"></a>step1:前期准备</h2><h3 id="nodejs的安装配置"><a href="#nodejs的安装配置" class="headerlink" title="nodejs的安装配置"></a>nodejs的安装配置</h3><p>打开nodejs官网对nodejs进行下载，下载完成后按照默认选项进行安装，其中安装位置自行选择。<br>安装完成后打开电脑命令提示符进行测试，输入<code>node -v</code>查看node版本，并输入<code>npm</code>查看npm指令是否可以正常使用。<br>及时进行环境配置，[参考CSDN博客]<a href="https://blog.csdn.net/weixin_52799373/article/details/123840137?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167540395116782425689923%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167540395116782425689923&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-123840137-null-null.142%5Ev73%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_52799373/article/details/123840137?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167540395116782425689923%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167540395116782425689923&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-123840137-null-null.142%5Ev73%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&amp;utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187</a></p><h3 id="git的安装配置"><a href="#git的安装配置" class="headerlink" title="git的安装配置"></a>git的安装配置</h3><p>由于git域外网站下载过慢，此处选择清华镜像网站中的git进行安装，按照默认选项安装，修改安装位置，鼠标右击点击更多选项并出现git bush here，git gui here则说明安装成功。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>用管理员身份打开命令提示符，输入指令<code>npm install -g hexo</code>安装hexo，完成后输入<code>hexo -v</code>命令，查看hexo是否安装成功。</p><h3 id="建立github仓库"><a href="#建立github仓库" class="headerlink" title="建立github仓库"></a>建立github仓库</h3><p>（此处原本想使用gitee作为部署网站，但是由于进行到后面发现gitee page的功能已经下架，所以此处选择github进行后续的部署）<br>建立自己的github账号，并使用”用户名.github.io”作为新的仓库名称（此处尤其要注意，否则后续的部署都会失败）</p><h2 id="step2：进行后续的环境部署"><a href="#step2：进行后续的环境部署" class="headerlink" title="step2：进行后续的环境部署"></a>step2：进行后续的环境部署</h2><h3 id="配置远程连接"><a href="#配置远程连接" class="headerlink" title="配置远程连接"></a>配置远程连接</h3><p>打开电脑c盘的users文件夹，如果有ssh文件则将其删除，输入<code>ssh -keygen -t rsa -Cgithub绑定的邮箱&quot;</code>建立ssh远程密钥。<br>成功后打开新出现的.ssh文件中的id_rsa.pub文件，复制其中的内容，在github设置中点击SSH and GPS keys选项，点击new SSH KEY将复制好的内容粘贴进去，创立远程连接。<br>打开Git Bush，输入<code>ssh -T git@github.com</code>查看是否可以连接成功。出现successfully则说明成功，否则可能是因为环境配置的问题，按照环境配置的步骤一一检查即可。<br>最后，配置用户名和邮箱：<code>git config --global user.name&quot;github的用户名&quot;</code> <code>git config --global user.email&quot;github绑定的邮箱&quot;</code></p><h3 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h3><p>在博客文件夹下再次打开git bush,使用<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git插件<br>打开_config.yml文件，将最后的deploy内容中的用户名替换为自己的github用户名。<br>使用<code>hexo c</code>,<code>hexo g</code>,<code>hexo d</code>将文章上传。<code>hexo s</code>用于打开hexo网页。<br>最后可以使用http:&#x2F;&#x2F;用户名.github.io访问博客网站。</p><h3 id="更换fluid主题"><a href="#更换fluid主题" class="headerlink" title="更换fluid主题"></a>更换fluid主题</h3><p>以管理员身份运行命令提示符，切换当前目录到myblog目录，输入命令<code>npm install --save hexo-theme-fliud</code><br>再次打开_config.yml文件修改theme:fluid。<br>新建一个文件”_config.fluid,yml”，在其中配置fluid主题格式，配置代码如下</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs clean">banner_img: /img/bg/<span class="hljs-number">1.</span>jpg <br># navbar:<br>#   blog_title: liran blogs<br># ==================================== 全局设置 ====================================<br><br>## 顶部预览大图（不知道为什么，设置这个属性貌似没起到作用）<br>#banner_img: 你的图片地址/链接<br><br>## Hexo的网页图标<br>#favicon: 你的图片地址/链接<br><br>## 是否强制全局HTTPS<br>force_https: true<br><br>## 自定义JS<br>custom_js:<br>  ### 鼠标点击出小爱心❤<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/love.js</span><br>  ### 鼠标跟随小星星<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js</span><br>  ### 小雪花飘落<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxuehua.js</span><br>  ### 动态彩带<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js</span><br><br>## 自定义CSS<br>custom_css: <br>  ### 引入 iconfont 的图标（这是我的iconfont项目链接，最好可以换成你自己的）<br>  - <span class="hljs-comment">//at.alicdn.com/t/c/font_3846514_kabxni94auf.css</span><br>  ### 鼠标指针美化<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/shubiao.css</span><br>  ### 滚动条美化<br>  - <span class="hljs-comment">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/gundongtiao.css</span><br><br>## 暗黑模式设置<br>dark_mode:<br>  enable: true<br>  default: auto<br><br>## 导航栏设置<br>navbar:<br>  ### 博客标题<br>  blog_title: liran blogs<br>  ### 导航菜单<br>  menu:<br>    - &#123; key: <span class="hljs-string">&#x27;首页&#x27;</span>, link: <span class="hljs-string">&#x27;/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-home-fill&#x27;</span> &#125;<br>    - &#123; key: <span class="hljs-string">&#x27;归档&#x27;</span>, link: <span class="hljs-string">&#x27;/archives&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span> &#125;<br>    - &#123; key: <span class="hljs-string">&#x27;分类&#x27;</span>, link: <span class="hljs-string">&#x27;/categories&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-th-large&#x27;</span>&#125;<br>    - &#123; key: <span class="hljs-string">&#x27;标签&#x27;</span>, link: <span class="hljs-string">&#x27;/tags/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-tags-fill&#x27;</span>&#125;<br>    - &#123; key: <span class="hljs-string">&#x27;关于&#x27;</span>, link: <span class="hljs-string">&#x27;/about/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span>&#125;<br>    - &#123; key: <span class="hljs-string">&#x27;友链&#x27;</span>, link: <span class="hljs-string">&#x27;/links/&#x27;</span>, icon: <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;<br>    - &#123;<br>      key: <span class="hljs-string">&#x27;文档&#x27;</span>,<br>      icon: <span class="hljs-string">&#x27;iconfont icon-book&#x27;</span>,<br>      submenu: [<br>        &#123; key: <span class="hljs-string">&#x27;主题博客&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/&#x27;</span> &#125;,<br>        &#123; key: <span class="hljs-string">&#x27;配置指南&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,<br>        &#123; key: <span class="hljs-string">&#x27;图标用法&#x27;</span>, link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;<br>      ]<br>    &#125;<br><br>## 关于页设置<br>about:<br>  ## 关于页的顶部预览图<br>  banner_img: 你的图片地址/链接<br>  ### 你的头像<br>  avatar: <br>  ### 你的昵称<br>  name: <span class="hljs-string">&quot;WSKH0929&quot;</span><br>  ### 个人简介<br>  intro: <span class="hljs-string">&quot;一起学习，一起进步&quot;</span><br>  ### 外链设置<br>  icons:<br>    - &#123; <span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;iconfont icon-github-fill&#x27;</span>, link: <span class="hljs-string">&#x27;你的链接&#x27;</span>, tip: <span class="hljs-string">&#x27;GitHub&#x27;</span> &#125;<br>    - &#123; <span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;iconfont icon-gitee-fill-round&#x27;</span>, link: <span class="hljs-string">&#x27;你的链接&#x27;</span>, tip: <span class="hljs-string">&#x27;Gitee&#x27;</span> &#125;<br>    - &#123; <span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;iconfont icon-csdn&#x27;</span>, link: <span class="hljs-string">&#x27;你的链接&#x27;</span>, tip: <span class="hljs-string">&#x27;CSDN&#x27;</span> &#125;<br>    - &#123; <span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;iconfont icon-qq&#x27;</span>, qrcode: <span class="hljs-string">&#x27;你的链接&#x27;</span> &#125;<br>    - &#123; <span class="hljs-keyword">class</span>: <span class="hljs-string">&#x27;iconfont icon-weixin&#x27;</span>, qrcode: <span class="hljs-string">&#x27;你的链接&#x27;</span> &#125;<br><br># ## 友情链接页设置<br># links:<br>#   ### 友情链接页的顶部预览图<br>#   banner_img: /img/bg/<span class="hljs-number">1.</span>jpg <br>#   items:<br>#     - &#123;<br>#       title: <span class="hljs-string">&#x27;liran0502&#x27;</span>,<br>#       intro: <span class="hljs-string">&#x27;liran 的 修改&#x27;</span>,<br>#       link: <span class="hljs-string">&#x27;你的链接&#x27;</span>,<br>#       avatar: <span class="hljs-string">&#x27;你的链接&#x27;</span><br>#     &#125;<br>#     - &#123;<br>#       title: <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,<br>#       intro: <span class="hljs-string">&#x27;Fluid 主题使用指南&#x27;</span>,<br>#       link: <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,<br>#       avatar: <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span><br>#     &#125;<br>#   ### 默认头像<br>#   default_avatar: 你的图片地址/链接<br><br>## 标签页设置<br>tag:<br>  ### 标签页的顶部预览图<br>  banner_img: /img/bg/<span class="hljs-number">1.</span>jpg<br>  <br>## 分类页设置<br>category:<br>  ### 分类页的顶部预览图<br>  banner_img: /img/bg/<span class="hljs-number">1.</span>jpg<br>  <br>## 归档页设置<br>archive:<br>  ### 归档页的顶部预览图<br>  banner_img: /img/bg/<span class="hljs-number">1.</span>jpg<br><br>## 懒加载设置<br>lazyload:<br>  ### 是否启用懒加载<br>  enable: true<br>  ### 指定加载时的占位图片<br>  loading_img: /img/bg/<span class="hljs-number">1.</span>jpg<br>  ### 为 true 时，懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter (opens new window)里指定<br>  onlypost: false<br>  ### 触发加载的偏移倍数，基数是视窗高度（即提前 N 屏高度触发加载），可根据部署环境的请求速度调节<br>  offset_factor: <span class="hljs-number">2</span><br> <br>## 全局字体设置<br>font:  <br>  ### 全局字号<br>  font_size: <span class="hljs-number">16</span>px<br>  ### 全局字体族<br>  font_family: <span class="hljs-string">&quot;Microsoft YaHei&quot;</span><br>  ### 代码字号<br>  code_font_size: <span class="hljs-number">85</span>%<br>  <br>## 网页访问统计<br>web_analytics: <br>  ### 默认为false，启用网页统计改为true即可<br>  enable: true<br>  ### 百度统计的Key，参见 https:<span class="hljs-comment">//tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376 代码获取中 hm.js? 后边的字符串</span><br>  baidu: <br>  ### Google统计的Tracking ID，参见 https:<span class="hljs-comment">//analytics.google.com/analytics/web/  </span><br>  google:<br>  ### 腾讯统计的H5 App id，参见 https:<span class="hljs-comment">//mta.qq.com/h5/manage/ctr_app_manage (开启高级功能才有cid)</span><br>  tencent:<br>    sid:<br>    cid:<br>  ### <span class="hljs-number">51.</span>la站点统计ID，参见 https:<span class="hljs-comment">//www.51.la/user/site/index</span><br>  woyaola:<br>  ### 友盟/cnzz站点统计web_id，参见 https:<span class="hljs-comment">//web.umeng.com/main.php?c=site&amp;a=show</span><br>  cnzz:<br>  ### LeanCloud 计数统计，可用于 PV UV 展示，如果 web_analytics.enable 没有开启，PV UV 展示只会查询，不会增加<br>  leancloud:<br>    app_id:<br>    app_key:<br>    #### REST API 服务器地址，国际版不填<br>    server_url:<br><br>## 底部栏设置<br>footer:<br>  ### 统计访问人数设置<br>  statistics:<br>    #### 是否开启访问人数统计<br>    enable: true<br>    #### 可选 leancloud | busuanzi  根据自己需求选择<br>    source: <span class="hljs-string">&quot;busuanzi&quot;</span><br>    #### 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>    pv_format: <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span><br>    uv_format: <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br>    <br>## OpenGraph设置<br>open_graph:<br>  enable: true<br>  twitter_card: summary_large_image<br>  twitter_id:<br>  twitter_site:<br>  google_plus:<br>  fb_admins:<br>  fb_app_id:<br>  <br># ==================================== 首页设置 ====================================<br>index:<br>  ## 打字机设置<br>  slogan:<br>    ### 是否启用打字机<br>    enable: true<br>    ### 打字机文字内容<br>    text: 满怀希望就能所向披靡！<br>  ## 文章跳转方式 _blank：新标签页打开  _self：当前标签页打开<br>  post_url_target: _self<br>  ## 文章信息设置：可配置隐藏包括发布时间、分类、标签<br>  post_meta:<br>    date: true<br>    category: true<br>    tag: true<br>    <br># ==================================== 文章页设置 ====================================<br>post:<br>  ## 统一给文章设置一个默认封面<br>  default_index_img: /img/bg/<span class="hljs-number">1.</span>jpg<br>  ## 日期/字数/阅读时长/阅读数 设置<br>  meta:<br>    author:  # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值<br>      enable: true<br>    date:  # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>      enable: true<br>      format: <span class="hljs-string">&quot; YYYY 年 MM 月 DD 日 , a hh:mm , dddd&quot;</span>  # 格式参照 ISO<span class="hljs-number">-8601</span> 日期格式化<br>    wordcount:  # 字数统计<br>      enable: true<br>      format: <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  # 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同<br>    min2read:  # 阅读时间<br>      enable: true<br>      format: <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>    views:  # 阅读次数<br>      enable: false<br>      source: <span class="hljs-string">&quot;leancloud&quot;</span>  # 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风<br>      format: <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span><br>  ## 评论设置<br>  comments:<br>    enable: true<br>    type: valine<br><br># ## valine 评论设置<br># valine:<br>#   appId: 你的appId<br>#   appKey: 你的appKey<br>#   serverURLs: 你的serverURLs<br>#   placeholder: 留言仅限讨论，禁止广告等行为<br><br>      <br># ==================================== 代码块设置 ====================================<br><span class="hljs-keyword">code</span>:<br>  ## 是否开启复制代码的按钮<br>  copy_btn: true<br>  ## 高亮设置<br>  highlight:<br>    ### 是否开启代码高亮<br>    enable: true<br>    ### 是否开启行号<br>    line_number: true<br>    ### 选择生成高亮的库，可选项: highlightjs、prismjs，对应下面两组配置，高亮的配置说明具体见主题配置中的注释<br>    lib: <span class="hljs-string">&quot;highlightjs&quot;</span><br>    highlightjs:<br>      style: <span class="hljs-string">&#x27;Github Gist&#x27;</span><br>      bg_color: false<br>    prismjs:<br>      style: <span class="hljs-string">&quot;default&quot;</span><br>      preprocess: true<br></code></pre></td></tr></table></figure><h1 id="完成博客的创建！"><a href="#完成博客的创建！" class="headerlink" title="完成博客的创建！"></a>完成博客的创建！</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/07/hello-world/"/>
    <url>/2025/02/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
